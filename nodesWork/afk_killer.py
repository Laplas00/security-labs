
#!/usr/bin/env python3
import subprocess
import time
from datetime import datetime, timedelta

# === –ö–û–ù–§–ò–ì ===
AFK_TIMEOUT_MINUTES = 30        # –ü–æ—Ä–æ–≥ –ø—Ä–æ—Å—Ç–æ—è –≤ –º–∏–Ω—É—Ç–∞—Ö
CHECK_INTERVAL_SECONDS = 60     # –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å (—Å–µ–∫—É–Ω–¥—ã)

def get_running_lab_containers():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.
    –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –ø–æ –Ω–∞–ª–∏—á–∏—é '-' –≤ –∏–º–µ–Ω–∏ (user-lab).
    """
    result = subprocess.run(
        ["docker", "ps", "--format", "{{.Names}}"],
        capture_output=True, text=True
    )
    names = result.stdout.strip().splitlines()
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ —Å –¥–µ—Ñ–∏—Å–æ–º (user-lab)
    return [n for n in names if "-" in n]

def get_container_start_time(name: str) -> datetime | None:
    """
    –ß–µ—Ä–µ–∑ docker inspect –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å.
    """
    result = subprocess.run(
        ["docker", "inspect", "-f", "{{.State.StartedAt}}", name],
        capture_output=True, text=True
    )
    iso_ts = result.stdout.strip()
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Z –≤ +00:00 –¥–ª—è fromisoformat
        return datetime.fromisoformat(iso_ts.replace("Z", "+00:00"))
    except Exception as e:
        print(f"[!] –ù–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –¥–ª—è {name}: {e}")
        return None

def has_recent_logs(name: str, since_minutes: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ since_minutes –º–∏–Ω—É—Ç.
    –ï—Å–ª–∏ docker logs --since –≤—ã–¥–∞—ë—Ç —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω.
    """
    # –§–æ—Ä–º–∞—Ç '30m' –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Docker CLI
    since_arg = f"{since_minutes}m"
    result = subprocess.run(
        ["docker", "logs", "--since", since_arg, name],
        capture_output=True, text=True
    )
    return bool(result.stdout.strip())

def stop_and_remove(name: str):
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–µ—Å–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç)
    subprocess.run(["docker", "stop", name], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º
    subprocess.run(["docker", "rm", name], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    print(f"üóë –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {name} —É–¥–∞–ª—ë–Ω –∫–∞–∫ AFK")


from icecream import ic

def afk_cleaner_loop():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª: –∫–∞–∂–¥—ã–µ CHECK_INTERVAL_SECONDS —Å–µ–∫—É–Ω–¥
    —Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã –¥–æ–ª—å—à–µ AFK_TIMEOUT_MINUTES
    –∏ –Ω–µ –ø–∏—à—É—Ç –ª–æ–≥–∏ ‚Äî –∏ —É–¥–∞–ª—è–µ–º –∏—Ö.
    """
    while True:
        now = datetime.utcnow()
        timeout_delta = timedelta(minutes=AFK_TIMEOUT_MINUTES)
        running = get_running_lab_containers()
        ic(running)
        killed = 0

        for name in running:
            start_time = get_container_start_time(name)
            if not start_time:
                continue
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω –º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if now - start_time < timeout_delta:
                continue
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ AFK_TIMEOUT_MINUTES ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–π
            if has_recent_logs(name, AFK_TIMEOUT_MINUTES):
                continue
            # –ò–Ω–∞—á–µ ‚Äî —Å—á–∏—Ç–∞–µ–º AFK –∏ —É–¥–∞–ª—è–µ–º
            stop_and_remove(name)
            killed += 1

        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(running)} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤, —É–¥–∞–ª–µ–Ω–æ {killed} AFK.")
        time.sleep(CHECK_INTERVAL_SECONDS)

if __name__ == "__main__":
    afk_cleaner_loop()

